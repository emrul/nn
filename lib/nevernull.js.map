{"version":3,"sources":["../src/nevernull.js"],"names":["require","nn","rawValue","wrappedValue","Proxy","handler","get","target","name","rawTarget","rawPropertyValue","undefined","nnUndefinedProperty","bind","set","property","value","receiver","module","exports"],"mappings":";;AAAA;AACAA,QAAQ,mBAAR;;AAEA;;;;;;;;;;;;AAYA,MAAMC,KAAMC,QAAD,IAAY;;AAErB;AACA;AACA,MAAIC,eAAe,MAAI;AACrB,WAAOD,QAAP;AACD,GAFD;;AAIA;AACA,SAAO,IAAIE,KAAJ,CAAUD,YAAV,EAAwBE,OAAxB,CAAP;AACD,CAVD;;AAYA;;;;;AAKA,MAAMA,UAAU;;AAEd;;;;;;;AAOAC,OAAK,UAASC,MAAT,EAAiBC,IAAjB,EAAsB;AACzB;AACA,QAAIC,YAAYF,QAAhB;AACA,QAAIG,mBAAmBD,YAAYA,UAAUD,IAAV,CAAZ,GAA8BG,SAArD;;AAEA;AACA,QAAGD,qBAAqBC,SAAxB,EAAkC;AAChC,aAAOC,mBAAP;AACD;;AAED;AACA,QAAG,OAAOF,gBAAP,KAA6B,UAAhC,EAA2C;AACzCA,yBAAmBA,iBAAiBG,IAAjB,CAAsBJ,SAAtB,CAAnB;AACD;;AAED;AACA,WAAOR,GAAGS,gBAAH,CAAP;AACD,GA1Ba;;AA4Bd;;;;;;;;;AASAI,OAAK,UAASP,MAAT,EAAiBQ,QAAjB,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA2C;AAC9C,QAAIR,YAAYF,QAAhB;AACA,QAAGE,cAAcE,SAAjB,EAA2B;AAAE;AAAS;AACtCF,cAAUM,QAAV,IAAsBC,KAAtB;AACD;AAzCa,CAAhB;;AA4CA;;;AAGA,MAAMJ,sBAAsBX,GAAGU,SAAH,CAA5B;;AAEAO,OAAOC,OAAP,GAAiBlB,EAAjB","file":"nevernull.js","sourcesContent":["//if Proxy is not natively supported, ensure polyfill is created.\nrequire('../vendor/reflect');\n\n/**\n * Returns an object which allows for safe navigation of properties.\n * When raw property values are needed, simply execute the property as a function.\n *\n * e.g.\n * let nnObject = nn({ a: 1 });\n * nnObject.a() == 1\n * nnObject.non.existent.property.access() == undefined\n *\n * @param rawValue - object to be wrapped.\n * @returns {Proxy}\n */\nconst nn = (rawValue)=>{\n\n  //Each property accessed on a nevernull function-object will be this function.\n  //e.g. nn({}).prop1 is a function, which when executed, returns the passed in rawValue.\n  let wrappedValue = ()=>{\n    return rawValue;\n  };\n\n  //intercept all property access on the wrappedValue function-object\n  return new Proxy(wrappedValue, handler);\n};\n\n/**\n * Proxy handler object.  Any time a property is read, get is executed first, allowing us to ensure the property value\n * is never null/undefined.\n * @type {{get: handler.get}}\n */\nconst handler = {\n\n  /**\n   * When a property is accessed, this function intercepts its access and instead returns a Proxy of a wrappedValue function.\n   * This allows us to do lazy recursion on all nested properties.\n   * @param target - object which is being asked for the property with the name of the 'name' parameter.\n   * @param name - property name on the target who's value is needed.\n   * @returns {Proxy} - recursive call to nevernull is returned so accessing nested properties is always safe.\n   */\n  get: function(target, name){\n    //get the raw target so we can access the raw property value.\n    let rawTarget = target();\n    let rawPropertyValue = rawTarget ? rawTarget[name] : undefined;\n\n    //for performance: if the property value is undefined, there is no need to make a recursive call.\n    if(rawPropertyValue === undefined){\n      return nnUndefinedProperty;\n    }\n\n    //function properties should maintain their context.\n    if(typeof(rawPropertyValue) === 'function'){\n      rawPropertyValue = rawPropertyValue.bind(rawTarget);\n    }\n\n    //ensure the property is never null.\n    return nn(rawPropertyValue);\n  },\n\n  /**\n   * Conditionally sets the target[property].\n   * If the target has a value (ie is not undefined), property will be set to the value.\n   * If the target is undefined, the attempt to set the property will be ignored.\n   * @param target - target which contains the property we will set the value of.\n   * @param property - property name on the target which should be assigned value.\n   * @param value - value to assign to the target[property].\n   * @param receiver - the object to which the assignment was originally directed (usually the Proxy object).\n     */\n  set: function(target, property, value, receiver){\n    let rawTarget = target();\n    if(rawTarget === undefined){ return; }\n    rawTarget[property] = value;\n  }\n};\n\n/**\n * Cache the undefined version for speed.\n */\nconst nnUndefinedProperty = nn(undefined);\n\nmodule.exports = nn;\n"]}